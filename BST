
public class BST<T> {
    BSTNode<T> root, current;
	
	/** Creates a new instance of BST */
	public BST() {
		root = current = null;
	}
	public boolean empty() {
		return root == null;
	}
	public boolean full() {
		return false;
	}
	public T retrieve () {
		return current.data;
	}
    
    public boolean findKey(String k) {
        BSTNode<T> p = root;
        while (p != null) {
            if (k.compareTo(p.key) == 0) {
                return true;
            } else if (k.compareTo(p.key) < 0) {
                p = p.left;
            } else {
                p = p.right;
            }
        }
        return false;
    }
    public boolean insert(String k, T val) {
        if (root == null) { 
            root = new BSTNode<T>(k, val);  
            return true; 
        }

        BSTNode<T> p = root; 
        if (findKey(k)) { 
            return false; 
        }
        BSTNode<T> tmp = new BSTNode<T>(k, val); 
        if (k.compareTo(current.key) < 0) { 
            current.left = tmp;             
        } else {
            current.right = tmp;            
        }
        current = tmp;                   
        return true;                      

    }
  
    
    public boolean remove_key(String k) {
        String k1 = k;
        BSTNode<T> p = root;
        BSTNode<T> q = null; 
        while (p != null) {
            if (k1.compareTo(p.key) < 0) {
                q = p;
                p = p.left;
            } else if (k1.compareTo(p.key) > 0) {
                q = p;
                p = p.right;
            }
            else {

             
                if ((p.left != null) && (p.right != null)) {
                    
                    BSTNode<T> min = p.right;
                    q = p;
                    while (min.left != null) {
                        q = min;
                        min = min.left;
                    }
                    p.key = min.key;
                    p.data = min.data;
                    k1 = min.key;
                    p = min;
                    
                }
                if (p.left != null) { // One child
                    p = p.left;
                } else { // One or no children
                    p = p.right;
                }
                if (q == null) { // No parent for p, root m
                    root = p;
                } else {
                    if (k1.compareTo(q.key) < 0) {
                        q.left = p;
                    } else {
                        q.right = p;
                    }
                }
                
            }

        }
        current=root;
        return true;
    }

}
